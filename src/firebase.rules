// src/firebase.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the authenticated user has a specific role in the /users collection
    function hasRole(role) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Checks if the authenticated user is a Teacher or Admin
    function isTeacherOrAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ["Teacher", "Admin"];
    }

    // Checks if the authenticated user is an Admin
    function isAdmin() {
      return hasRole("Admin");
    }

    // Checks if the user document being accessed belongs to the authenticated user
    function isOwner(userId) {
        return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if the authenticated user is the requester of an event request
    function isRequester(requestId) {
       return isAuthenticated() &&
              exists(/databases/$(database)/documents/eventRequests/$(requestId)) &&
              get(/databases/$(database)/documents/eventRequests/$(requestId)).data.requester == request.auth.uid;
    }

     // Checks if the authenticated user is the organizer of an event
    function isEventOrganizer(eventId) {
       return isAuthenticated() &&
              exists(/databases/$(database)/documents/events/$(eventId)) &&
              get(/databases/$(database)/documents/events/$(eventId)).data.organizer == request.auth.uid;
    }

    // --- Rules ---

    // Users Collection
    match /users/{userId} {
      // Allow reading basic user info (needed for leaderboards, user cards etc.) by any authenticated user
      allow read: if isAuthenticated();
      // Allow update only by the owner of the profile
      allow update: if isOwner(userId);
       // No direct creation or deletion via Firestore client
      allow create, delete: if false;
       // Projects are an array field, handled by the 'update' rule above.
    }

    // Events Collection
    match /events/{eventId} {
      // Any authenticated user can read event details
      allow read: if isAuthenticated();
       // Event creation happens via 'approveEventRequest', handled by Teachers/Admins.
       // Allow direct creation only if done by Teacher/Admin (e.g., future admin panel feature)
      allow create: if isTeacherOrAdmin();
      // Allow updates (status, teams, ratings, winners, toggleRatings, etc.) and deletion ONLY by the organizer or an Admin.
      // Uses resource.data to check the *existing* organizer field.
      allow update, delete: if isAuthenticated() && (isEventOrganizer(eventId) || isAdmin());
      // Teams and Ratings are array fields within the event document, covered by 'update'.
    }

    // Resources Collection
    match /resources/{resourceId} {
      // Anyone (even unauthenticated) can read resources (matches ResourcesView access)
      allow read: if true;
      // Only Teachers or Admins can create, update, or delete resources
      allow write: if isTeacherOrAdmin(); // write combines create, update, delete
    }

    // EventRequests Collection
    match /eventRequests/{requestId} {
       // Allow read by Teachers/Admins OR the user who made the request
      allow read: if isAuthenticated() && (isTeacherOrAdmin() || isRequester(requestId));
       // Allow creation if authenticated AND the 'requester' field in the new document matches the user's UID
      allow create: if isAuthenticated() && request.resource.data.requester == request.auth.uid;
       // Allow updates (approve/reject status) only by Teachers or Admins
      allow update: if isTeacherOrAdmin();
       // No direct deletion
      allow delete: if false;
    }
  }
}